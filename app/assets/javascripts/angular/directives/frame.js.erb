angular.module("Prometheus.directives").directive('inlineFrame', ["$sce",
                                                  "VariableInterpolator",
                                                  "GraphiteTimeConverter",
                                                  "WidgetHeightCalculator",
                                                  "URLParser",
                                                  function($sce,
                                                    VariableInterpolator,
                                                    GraphiteTimeConverter,
                                                    WidgetHeightCalculator,
                                                    URLParser) {
  var FRAME_CONTAINER_PADDING = 10;
  var FRAME_BACKGROUND_COLOR = '%23191919';
  return {
    scope: {
      frame: "=frameSettings",
      aspectRatio: "=",
      index: "=",
      vars: "="
    },
    restrict: "AE",
    templateUrl: "<%= asset_path('frame_template.html') %>",
    link: function(scope, element, attrs) {
      // Appended to frame source URL to trigger refresh.
      scope.refreshCounter = 0;
      function frameHeight() {
        return WidgetHeightCalculator(element.find(".js_widget_wrapper")[0], scope.aspectRatio);
      }

      // In order for zoom-out to work correctly on dashboards with iframes,
      // the iframe needs to be completely reconstructed on each refresh.
      // Modifying an iframe's src attribute, as in the previous implementation,
      // changes the browser's history. This interrupts a user's attempt to zoom
      // out as it takes an additional history.back() execution to traverse the
      // history state added by modifying an iframe's src.
      // http://khaidoan.wikidot.com/iframe-and-browser-history
      scope.refreshFrame = function() {
        var url = VariableInterpolator(scope.frame.url, scope.vars);
        var trustedURL = $sce.trustAsResourceUrl(buildFrameURL(url));
        var frame = element.find('.frame_container');
        frame.height(frameHeight());
        frame.html('<iframe src="'+ trustedURL +'" class="frame_iframe" marginwidth="0" scrolling="no"></iframe>');
      };

      var a = ['frame.url', 'frame.range', 'frame.endTime', 'refreshCounter', 'frame.graphite'];
      a.forEach(function(w) {
        scope.$watch(w, scope.refreshFrame);
      });
      ['refreshDashboard', 'redrawGraphs'].forEach(function(m) {
        scope.$on(m, scope.refreshFrame);
      });

      function buildFrameURL(url) {
        var parser = URLParser(url, {ignoreHash: true});

        if (scope.frame.graphite) {
          setGraphiteParams(parser);
        }

        parser.setQueryParam('decache', scope.refreshCounter);

        return parser.stringify();
      }

      function setGraphiteParams(parser) {
        var height = frameHeight();
        parser.setQueryParam('height', height);
        parser.setQueryParam('width', ((height / scope.aspectRatio) - FRAME_CONTAINER_PADDING));
        parser.setQueryParam('from', GraphiteTimeConverter.graphiteFrom(scope.frame.range, scope.frame.endTime));
        parser.setQueryParam('until', GraphiteTimeConverter.graphiteUntil(scope.frame.endTime));
        parser.setQueryParam('bgcolor', FRAME_BACKGROUND_COLOR);
      }
    }
  };
}]);
